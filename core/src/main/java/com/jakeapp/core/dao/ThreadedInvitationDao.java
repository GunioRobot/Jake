package com.jakeapp.core.dao;
import com.jakeapp.core.domain.Invitation;
import com.jakeapp.core.domain.Project;
import com.jakeapp.core.domain.exceptions.InvalidProjectException;
import java.util.List;
import java.util.ArrayList;
import org.hibernate.HibernateException;
import com.jakeapp.core.util.InjectableTask;
import com.jakeapp.core.util.SpringThreadBroker;

public class ThreadedInvitationDao implements IInvitationDao {

	private IInvitationDao dao;

	public ThreadedInvitationDao(IInvitationDao dao) {
		this.dao = dao;
	}

	// This file was automatically generated by generateDao.sh. Do not modify. 

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Invitation create(final Invitation invitation) throws InvalidProjectException {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Invitation>() {

				@Override
				public Invitation calculate() throws Exception {
					return ThreadedInvitationDao.this.dao.create(invitation);
				}
			});
		} catch (InvalidProjectException  e) {
			throw e;
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public List<Invitation> getAll() {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<List<Invitation>>() {

				@Override
				public List<Invitation> calculate() throws Exception {
					return ThreadedInvitationDao.this.dao.getAll();
				}
			});
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Project accept(final Invitation invitation) {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Project>() {

				@Override
				public Project calculate() throws Exception {
					return ThreadedInvitationDao.this.dao.accept(invitation);
				}
			});
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public void reject(final Invitation invitation) {
		
		try {
			SpringThreadBroker.getInstance().doTask(new InjectableTask<Void>() {

				@Override
				public Void calculate() throws Exception {
					ThreadedInvitationDao.this.dao.reject(invitation);
					return null;
				}
			});
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}


}
