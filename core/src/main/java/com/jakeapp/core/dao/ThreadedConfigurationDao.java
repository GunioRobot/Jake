package com.jakeapp.core.dao;
import java.util.List;
import org.apache.log4j.Logger;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import com.jakeapp.core.domain.Configuration;

public class ThreadedConfigurationDao implements IConfigurationDao {

	private IConfigurationDao dao;

	public ThreadedConfigurationDao(IConfigurationDao dao) {
		this.dao = dao;
	}

	// This file was automatically generated by generateDao.sh. Do not modify. 

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public void deleteConfigurationValue(final String name) {
		
		try { 
			SpringThreadBroker.getInstance().doTask(new InjectableTask<Void>() {

				@Override
				public Void calculate() throws Exception {
					ThreadedConfigurationDao.this.dao.deleteConfigurationValue(name);
					return null;
				}
			});
		}catch(RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public boolean configurationValueExists(final String name) {
		
		try { 
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Boolean>() {

				@Override
				public Boolean calculate() throws Exception {
					return ThreadedConfigurationDao.this.dao.configurationValueExists(name);
				}
			});
		}catch(RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Configuration update(final Configuration configuration) {
		
		try { 
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Configuration>() {

				@Override
				public Configuration calculate() throws Exception {
					return ThreadedConfigurationDao.this.dao.update(configuration);
				}
			});
		}catch(RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public List<Configuration> getAll() {
		
		try { 
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<List<Configuration>>() {

				@Override
				public List<Configuration> calculate() throws Exception {
					return ThreadedConfigurationDao.this.dao.getAll();
				}
			});
		}catch(RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public String getConfigurationValue(final String name) {
		
		try { 
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<String>() {

				@Override
				public String calculate() throws Exception {
					return ThreadedConfigurationDao.this.dao.getConfigurationValue(name);
				}
			});
		}catch(RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public void setConfigurationValue(final String name, final String value) {
		
		try { 
			SpringThreadBroker.getInstance().doTask(new InjectableTask<Void>() {

				@Override
				public Void calculate() throws Exception {
					ThreadedConfigurationDao.this.dao.setConfigurationValue(name, value);
					return null;
				}
			});
		}catch(RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}


}
