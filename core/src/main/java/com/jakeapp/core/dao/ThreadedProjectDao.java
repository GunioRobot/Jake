package com.jakeapp.core.dao;
import java.util.List;
import java.util.UUID;
import com.jakeapp.core.dao.exceptions.NoSuchProjectException;
import com.jakeapp.core.domain.InvitationState;
import com.jakeapp.core.domain.Project;
import com.jakeapp.core.domain.exceptions.InvalidProjectException;
import com.jakeapp.core.util.InjectableTask;
import com.jakeapp.core.util.SpringThreadBroker;

public class ThreadedProjectDao implements IProjectDao {

	private IProjectDao dao;

	public ThreadedProjectDao(IProjectDao dao) {
		this.dao = dao;
	}

	// This file was automatically generated by generateDao.sh. Do not modify. 

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Project create(final Project project) throws InvalidProjectException {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Project>() {

				@Override
				public Project calculate() throws Exception {
					return ThreadedProjectDao.this.dao.create(project);
				}
			});
		} catch (InvalidProjectException  e) {
			throw e;
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Project read(final UUID uuid) throws NoSuchProjectException {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Project>() {

				@Override
				public Project calculate() throws Exception {
					return ThreadedProjectDao.this.dao.read(uuid);
				}
			});
		} catch (NoSuchProjectException  e) {
			throw e;
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Project update(final Project project) throws NoSuchProjectException {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<Project>() {

				@Override
				public Project calculate() throws Exception {
					return ThreadedProjectDao.this.dao.update(project);
				}
			});
		} catch (NoSuchProjectException  e) {
			throw e;
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public List<Project> getAll() {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<List<Project>>() {

				@Override
				public List<Project> calculate() throws Exception {
					return ThreadedProjectDao.this.dao.getAll();
				}
			});
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public void delete(final Project project) throws NoSuchProjectException {
		
		try {
			SpringThreadBroker.getInstance().doTask(new InjectableTask<Void>() {

				@Override
				public Void calculate() throws Exception {
					ThreadedProjectDao.this.dao.delete(project);
					return null;
				}
			});
		} catch (NoSuchProjectException  e) {
			throw e;
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public List<Project> getAll(final InvitationState state) {
		
		try {
			return SpringThreadBroker.getInstance().doTask(new InjectableTask<List<Project>>() {

				@Override
				public List<Project> calculate() throws Exception {
					return ThreadedProjectDao.this.dao.getAll(state);
				}
			});
		} catch (RuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new IllegalStateException(e);
		}
	
	}


}
