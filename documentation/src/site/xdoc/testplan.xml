<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
		"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
	<properties>
		<title>Test Plan</title>

		<author email="dominik.dorn@gmail.com">Dominik Dorn</author>
	</properties>

	<body>

		<section name="Test Plan">
			<subsection name="Purpose">
				This test plan document for the project &quot;Jake&quot; should cover the following goals:
				<ul>
					<li>Definition of used terms</li>
					<li>Identification of the components to be tested</li>
					<li>Requirements for the tests</li>
					<li>List of tests to be performed</li>
					<li>Description of the test strategy</li>
				</ul>
			</subsection>

			<subsection name="Used terms">
				Beside the terms used and defined in the section &quot;Components&quot; we use the following terms:
				<ol>
					<li>
						<b>Test case / Unit test</b>
						<br/>
						A Test case is a java file that tests a specified aspect (unit) of a component of a program.
					</li>
					<li>
						<b>Test driven development</b>
						<br/>
						Is a method of creating software. The idea is to specify what interface a component has, write a
						test case for each aspect of the interface and only after that, create an implementation of that
						interface.
					</li>
					<li>
						<b>Test suite</b>
						<br/>
						A test suite is a batch of test cases for one component.
					</li>
					<li>
						<b>Data Access Object</b>
						<br/>
						We encapsulate all the logic needed to manipulate data (e.g. Database records, files in the
						filesystem) with so called Data Access Object. Therefore we can later easily change the way we
						read or write data to disk (e.g. changing the database backend) without altering the rest of the
						code.
					</li>

					<li>
						<b>Project root folder</b>
						<br/>
						This is the folder on the filesystem of the user where the corresponding project is saved.
						All files that are added to the project are copied beneath this folder.
					</li>
					<li>
						<b>Usability Test</b>
						<br/>
						The programmmer tests the corresponding GUI for usability. Common usability guidelines should be applied.
					</li>


				</ol>
			</subsection>

			<subsection name="Test requirements">
				The project consists of the following components:
				<table>
					<thead>
						<tr>
							<th>#</th>
							<th>Component<br/>Name</th>
							<th>Component Description</th>
							<th width="100">Priority</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>1.</td>
							<td><strong>GUI</strong></td>
							<td>
								The graphical user interface (main window and dialogs).
							</td>
							<td>
								Very High
							</td>
						</tr>
						<tr>
							<td>2.</td>
							<td><strong>Core</strong></td>
							<td>
								The core component contains the business logic of the program, supplies interfaces for
								(graphical) user interfaces and communicates with the other components.
							</td>
							<td>
								Very High
							</td>
						</tr>
						<tr>
							<td>3.</td>
							<td><strong>FSService</strong></td>
							<td>
								The filesystem service is used to handle the 
								whole file and filesystem based logic.
							</td>
							<td>
								Very High
							</td>
						</tr>
						<tr>
							<td>4.</td>
							<td><strong>SyncService</strong></td>
							<td>The synchronisation service is a mock object 
								simulating the synchronisation between clients.
							</td>
							<td>Low</td>
						</tr>
						<tr>
							<td>5.</td>
							<td><strong>ICService</strong></td>
							<td>The "InterClient Communication Service" is a 
							mock object simulating the communications between 
							clients and the network
							</td>
							<td>Low</td>
						</tr>


					</tbody>
				</table>

				<h4>GUI subcomponents</h4>
				The GUI subcomponents are not covered by automatic tests. 
				They are tested for functionality and usability by the 
				programmer implementing the corresponding GUI element.
				<table>
					<thead>
						<tr>
							<th>Parent Component</th>
							<th>Child Component</th>
							<th>Priority</th>
							<th>Ticket#</th>
						</tr>
					</thead>
					<tbody>
						<!-- start gui tests -->
						<tr>
							<td>GUI</td>
							<td>LoginGUI</td>
							<td>Very High</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>CreateProjectGUI</td>
							<td>Very High</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>MainView</td>
							<td>Very High</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>ViewLogGUI</td>
							<td>Medium</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>ReadMsgGUI</td>
							<td>Medium</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>SendMsgGUI</td>
							<td>High</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>ListNotesGui</td>
							<td>Medium</td>
							<td>[none yet]</td>
						</tr>
						<tr>
							<td>GUI</td>
							<td>ViewEditNoteGUI</td>
							<td>High</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>ListPeopleGui</td>
							<td>Medium</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>UserInfoGUI</td>
							<td>Medium</td>
							<td>[none yet]</td>
						</tr>

						<tr>
							<td>GUI</td>
							<td>ListFilesGUI</td>
							<td>High</td>
							<td>[none yet]</td>
						</tr>


						<tr>
							<td>GUI</td>
							<td>ResolveConflictsGUI</td>
							<td>High</td>
							<td>[none yet]</td>
						</tr>


					</tbody>

				</table>


			</subsection>
		</section>
		<section name="Function tests">
			<subsection name="Types of test cases">
				<dl>
					<dt>FC</dt>
					<dd>Failure test case</dd>
					<dt>NC</dt>
					<dd>Normal test case</dd>
					<dt>SC</dt>
					<dd>Special test case</dd>
				</dl>
			</subsection>
			
			<ol>
				<li><a href="testcases-gui.html">GUI</a></li>
				<li><a href="testcases-core.html">Core</a></li>
				<li><a href="testcases-fss.html">FSService</a></li>
				<li><a href="testcases-ics.html">ICService</a></li>
				<li><a href="testcases-sync.html">SyncService</a></li>
			</ol>
		</section>

		<section name="Test Types">

			<subsection name="Functional Tests">
				We're using unit tests based on the JUnit Testing Framework in the current version (4.4).
				We want to ensure, that the component is doing what we expect
				it to do, before writing the component itself (test driven development)
			</subsection>

			<subsection name="User Interface">
				We don't do any automatic testing on the user interface, but we're doing manual
				Integration &amp; Usability tests on the GUI.
			</subsection>

			<subsection name="Data &amp; database integrity">
				The Data Access Objects are tested with unit tests.
				Therefore we can assure, the components are working
				correctly if the database and filesystem service
				behind them is working correctly.
			</subsection>

			<subsection name="Performance">
				We're not doing any performance testing. If we
				encounter performance problems during the tests,
				those will be noted.
			</subsection>

			<subsection name="Load tests">
				We're not doing any load testing because the
				project is not intended for high load situations.
			</subsection>

			<subsection name="Stress tests">
				We're not doing any stress testing because the
				project is not intended for high stress situations.
				The only component which could be vulnerable to high
				stress is the InterClient Communication Service.
				Because this component is not implemented during this
				project phase, no stress tests are required.
			</subsection>

			<subsection name="Security">
				Because all users of the systems have the same privileges,
				no security tests are planed to be performed except testing
				the ICS for correct login/logout of a user.
			</subsection>

			<subsection name="Permissions">
				Because all users of the systems have the same privileges,
				no permission tests are planed to be performed.
			</subsection>

			<subsection name="Failover &amp; recovery">
				No failover nor recovery tests are performed in this
				project phase.
			</subsection>

		</section>

		<section name="Tools">
			<ol>
				<li>
					<b>Unit Testing</b>
					<br/>
					We're using the JUnit Testing Framework for unit testing.
					<br/>
					<a href="http://www.junit.org">http://www.junit.org</a>
				</li>
				<li>
					<b>Mock Objects</b>
					<br/>
					We're planing on using JMock for creation of Mock objects.
					<br/>
					<a href="http://www.jmock.org">http://www.jmock.org</a>
				</li>

				<li>
					<b>Test Report Generation</b>
					<br/>
					We're using the Surefire-Report Plugin included in the Maven build management suite.
					<br/>
					<a href="http://maven.apache.org/plugins/maven-surefire-plugin/">
						http://maven.apache.org/plugins/maven-surefire-plugin/
					</a>
				</li>
			</ol>
		</section>


		<section name="Description of the test strategy">
			<ul>
				<li>
					Because we're using &quot;test driven development&quot; all tests should be created before the
					implementation of the specific interface.
				</li>
				<li>
					The person responsible for the specific component/interface is responsible for creating the
					test suites.
				</li>
				<li>
					All components begin testing with the beginning of the implementation, and end testing with the end of the project.
				</li>
				<li>
					The test delegate (Dominik Dorn) will occasionally check some of the test suites
					for quality and coverage and assigns tasks for the responsible person to correct the issue.
				</li>
				<li>
					Code reviews of the created sourcecode (not the tests) will be performed. Eventually found
					possible errors will be handled like described in the following section &quot;Error Reporting&quot;.
				</li>
				<li>
					A component is tested successfully if the unit-tests succeed and the aspects that the testcases cover are found adequate. 
				</li>
			</ul>


		</section>

		<section name="Test criteria">
			We start testing with the beginning of the implementation phase. 
			Because a good portion of the required java
			code can easily be autogenerated, we create unit tests before 
			completing the auto generated stubs by the
			IDE.
			<br/>
			We plan to stop testing when the project is complete and gets 
			accepted by the LVA-leadership.
			<br/>
			An alternative end of testing occurs, if the project group 
			breaks up and the project is aborted.
			<br/>
			If for any reason, some yet unknown requirements occur, this test plan and the corresponding test cases
			have to be updated.
			<br/>

			<subsection name="GUI">
				Testtypes:
				<ul>
					<!--<li>Integration test</li>-->
					<li>Usablity test</li>
				</ul>
			</subsection>

			<subsection name="Core">
				Testtypes:
				<ul>
					<!--<li>Integration test</li>-->
					<li>Unit tests</li>
					<!--<li>BlackBox tests</li>-->
				</ul>
			</subsection>

			<subsection name="FSS">
				Testtypes:
				<ul>
					<!--<li>Integration test</li>-->
					<li>Unit tests</li>
					<!--<li>BlackBox tests</li>-->
				</ul>
			</subsection>

			<subsection name="Sync">
				Testtypes:
				<ul>
					<!--<li>Integration test</li>-->
					<li>Unit tests</li>
					<!--<li>BlackBox tests</li>-->
				</ul>
			</subsection>

			<subsection name="ICS">
				Testtypes:
				<ul>
					<!--<li>Integration test</li>-->
					<li>Unit tests</li>
					<!--<li>BlackBox tests</li>-->
				</ul>
			</subsection>

		</section>


		<section name="Error Reporting / Bug Tracking">
			When an error is found:
			<ol>
				<li>An test case should be created by the person found the error with a short description
					of the circumstances causing the error, the input data and the expected output.
					A small test case, showing the input data should be created to show the problem to others.
				</li>
				<li>
					A bug in our bugtracking tool (flyspray) has to be opened and to be assigned to the person
					responsible for the specific component. The name of the test case should be noted.
				</li>
				<li>
					The ticket number received by the bugtracking tool should be noted in the test case.
				</li>
				<li>
					This document has to be updated, adding the error to the list of test cases.
				</li>
				<li>
					The changes have to be commited to our svn repository.
				</li>
				<li>
					If the bug or the corresponding test case would be to big, to create a small test case in a
					reasonable amount of time, an empty test case should be created, including a comment to
					reproduce the error. The person responsible for the code in question then has to create
					the full test case.
				</li>
			</ol>
		</section>


		<section name="Bug fixing &amp; verification">
			When a programmer becomes assigned to a bug, he/she has to
			<ol>
				<li>Set the tickets status to &quot;assigned&quot;</li>
				<li>Create the rest of the unit test</li>
				<li>Fix the specified code in the codebase of the component</li>
				<li>Test the unit case, redo (3) if necessary</li>
				<li>Make sure that the unit test is included in every new build of the component</li>
				<li>Close the ticket</li>
			</ol>

		</section>

		<section name="Code Reviews">
			Code reviews are sheduled for the end of Project Week 8 (30.5-1.6.08) and for the end of Project Week 10
			(13. - 15.6.08). On these dates, each project member reviews the code of 2 other members, adds comments,
			creates additional unit tests and eventually bug reports.
		</section>

		<section name="Sample Test Case">
			<h4>Filename Convention:</h4>
			<pre>sepm/trunk/{artefactId}/src/test/java/com/doublesignal/sepm/jake/<i>{artefactId}</i>/<i>{package}</i>/<i>{className}</i>Test.java</pre>
			where
			<ul>
				<li>
					<b>{artefactId}</b> is one of &quot;core&quot;, &quot;ics&quot;, &quot;fss&quot;, &quot;sync&quot;, etc.
				</li>
				<li>
					<b>{package}</b> is usually one of &quot;services&quot;, &quot;dao&quot;, etc.
				</li>
				<li>
					<b>{className}</b> is the name of the class to be tested.
				</li>
			</ul>
			<h4>Java File:</h4>
			<pre>package com.doublesignal.sepm.jake.{artefactId}/{package};


/* adjust as necessary */
import org.hamcrest.*;
import org.junit.*;
import org.jmock.*;

/* import necessary exceptions */
/* import necessary classes */


public class {className}Test
{

	/* set default values, e.g. object name, etc. */

	/* setup mockery if needed */
	Mockery context = new JUnit4Mockery();


	public String getName()
	{
	return "nameOfThisTestCase";
	}


	/**
	* acquire required resources
	*/
	@Before
	protected void setup()
	{

	}


	/**
	* {Test case name }
	* Description of the test case
	* Description of the input data
	* Description of the actual result
	* Description of the expected result
	* @author {author}
	* @date {date}
	* @revision {revision, default 1, increasing by each change}
	* {date first fixed in implementation}
	*/
	@Test(expected = {some}Exception.class)
	public void {testname}()
	{

	}

	/**
	* {Test case name }
	* Description of the test case
	* Description of the input data
	* Description of the actual result
	* Description of the expected result
	* @author {author}
	* @date {date}
	* @revision {revision, default 1, increasing by each change}
	* {date first fixed in implementation}
	*/
	@Test
	public void {anotherTestName}()
	{
	// some other test
	}

	/**
	* release all the resources acquired
	*/
	@After
	protected void tearDown()
	{

	}

}


</pre>

		</section>

		<section name="Changelog">
			<table>
				<thead>
					<tr>
						<th>No.</th>
						<th>Date</th>
						<th>Author</th>
						<th>Change</th>
					</tr>
				</thead>

				<tr>
					<td>1</td>
					<td>03.05.2008</td>
					<td>DD</td>
					<td>created</td>
				</tr>
				<tr>
					<td>2</td>
					<td>07.05.2008</td>
					<td>DD</td>
					<td>added testcase</td>
				</tr>
				<tr>
					<td>3</td>
					<td>16.05.2008</td>
					<td>DD</td>
					<td>Added Testcases, restructured Document, Added additional fields.</td>
				</tr>
				<tr>
					<td>4</td>
					<td>17.05.2008</td>
					<td>DD</td>
					<td>Added/Reworked testcases.</td>
				</tr>
				<tr>
					<td>5</td>
					<td>18.05.2008</td>
					<td>DD</td>
					<td>Added/Reworked testcases.</td>
				</tr>
				<tr>
					<td>6</td>
					<td>19.05.2008</td>
					<td>DD</td>
					<td>Added testcase numbers, filled some holes</td>
				</tr>
			</table>
		</section>
	</body>
</document>
