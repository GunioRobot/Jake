<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Assumptions</title>

    <author>Dominik Dorn</author>
    <author>Simon Wallner</author>
    <author>Johannes Buchner</author>
  </properties>

  <body>
    <section name="Assumptions">
	<p>This site acts a reference to all project related assumptions. In the upper part of the site you will find valid assumptions, categorised by their domain and scope. In the lower part you will find new, changed or assumptions that are currently under discussion and need approval by the team, or some team members.</p>
	<p>For the ease of use, each assumptions has an unique identifier [&lt;identifier&gt;]. This identifier should be short, simple and obvious. Once chosen it shall not be changed, and therefore be stable. If assumptions are refined, or otherwise hierarchically organised an identifier of the form [&lt;parent&gt;:&lt;child&gt;] shall be used.</p>
	<p>Discussion of Assumptions takes place at <a href="http://sepm.doublesignal.com/wiki/doku.php?id=assumptions">wiki/Assumptions</a></p>
	
	<subsection name="Affecting the concept">
		<table>
			<thead>
				<tr>
					<th>Description</th>
					<th>Rationale</th>
					<th>Affected Parts</th>
				</tr>
			</thead> 
			<tbody>
				<tr>
					<td>[offline] It is possible to work either online or offline. This implies that two users may work simultaneously on the same document. Hence some form of conflict resolution is needed.</td>
					<td>basic functionality</td>
					<td>scope of the application</td>
				</tr>
				<tr>
					<td>[all_equal] Objects to be shared will be treated equally; Files, Notes, etc. The meaning of this is that we don't handle each types of content differently.</td>
					<td>basic functionality</td>
					<td>scope of the application, architecture</td>
					<!-- note: wording has been changed without the need of general discussion -->
				</tr>
				<tr>
					<td>[folder_structure] Folder structure of imported folders is preserved</td>
					<td>ease of use, transparency for the user</td>
					<td>basic functionality, architecture</td>
				</tr>
				<tr> <!-- TODO: fix from techarch-meeting --> 
					<td>[project_folder] All shared data lies in one project folder</td>
					<td>simplifies implementation, transparency for the user</td>
					<td>basic functionality, architecture</td>
				</tr>
				<tr>
					<td>Feature: [passive_mode] The application can be fully operational even without constant user interaction. That means that the client may passively share data and therefore acts as a dedicated server.</td>
					<td>limit the problem of unavailable clients and increase the chance of working with the latest files.</td>
					<td>scope of the application, architecture, user interaction</td>
				</tr>
				<tr> <!-- TODO: discuss, as not modeled so far -->
					<td>Feature: [soft_lock] Instad of implementing a strict access control systems a soft lock is used. If a user wants to update a file, he/she may be notified that access to the file is somehow restricted. After receiving the notification the user may decide to obey the restriction or not.</td>
					<td>no dead- or abandoned locks, no access control required</td>
					<td>scope of application, architecture</td>
				</tr>
				<tr>
					<td>[push_pull] Concept: Data may either be pushed to, or pulled from a client</td>
					<td>necessary for synchronisation</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[auto_push_pull] The user may indicate whether the application automatically or manually pushes/pulls data. This option may save bandwidth and gives the user more control over the traffic.</td>
					<td>save bandwidth, more control over traffic, restrict traffic in insecure environments</td>
					<td>scope of application, architecture</td>
				</tr>	
				<tr>
					<td>[en] The UI and all public documentation are written in English.</td>
					<td>multi culture target audience</td>
					<td>ui, documentation</td>
				</tr>
				<tr>
					<td>[i18n] The application will be prepared for internationalisation. UI strings will be handled centrally.</td>
					<td>ease of translation, ease of  maintenance of the ui</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[multi_platform] The application shall run under Windows, Linux and Mac Os X</td>
					<td>variety of target audience</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[single_project] The project is centered around handling one project. An instance of the application will only handle one project and data pertaining to different projects shall be stored in different database files.</td>
					<td>simplicity, doing one thing well, clear separation of different projects and simpler data model</td>
					<td>architecture, GUI</td>
				</tr>
				<tr>
					<td>[no_chat] It is assumed that project members use a chat client next to the application. We don't want to replace the chat client and don't want to provide chat or group chat functionality. However, leaving a message for other project members (and displaying those) is a use case.</td>
					<td>Don't replace a chat client.</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[move] A move operation, e.g. when a user moves or renames a file in the file system, is treated like a delete and a create. </td>
					<td>simplicity. We don't have to track the log</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[implicit-tags] There will be no tags for folders. Reasons: There is no need to tag folders. Each folders name and parents are its tags and tags for the files in it. We will call that concept "implicit tags". It saves lot of implementation. tagging of folders is unnecessary, since the folder name has the information already. Optional: Add option to turn implicit tags off.
					</td> <!-- you may want to have a look at http://sepm.doublesignal.com/wiki/doku.php?id=discussion%3Aprotokoll%3A2008-04-30_techarch-meeting for more arguments -->
					<td>simplicity</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[no-folder-sync] Folders don't need to be synced.  We only sync files, we don't care about empty folders. Since we sync by relative file name (relpath), which is unique, this implicates the folders that need to be created.
					</td>
					<td>simplicity</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[login] The userid is the login to the ICService. It is entered on startup, or can be stored. A project member uses for one project (database file) his userid. For using multiple userids, those have to be added as project members and see [single_user]</td>
					<td></td>
					<td>architecture, UI</td>
				</tr>
			</tbody>
			<thead>
				<tr>
					<th colspan="3">under discussion: </th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>[no-spaces-in-tags] Tags don't contain spaces. Thus they can be written one after another.</td>
					<td>Common sense</td>
					<td>Architecture</td>
				</tr>
				<tr>
					<td>[push] Push is: The user wants a file, that he/she changed locally, to be distributed. The LogEntry with the right action is created. All other users (online or not) are notified, that changes exist, thus recommending them to request a [logsync]. </td>
					<td></td>
					<td>Architecture</td>
				</tr>
				<tr>
					<td>[pull] Pull is: A user knows (from the logs) that there exists a file and he/she wants it. It is downloaded from one who made the last change. Note: fallback to ask the others if they have this version might be tricky.</td>
					<td></td>
					<td>Architecture</td>
				</tr>
				<tr>
					<td>[logsync] LogSync is: A user wants to find out, who made changes and requests the logs from the other users one by one. </td>
					<td></td>
					<td>Architecture</td>
				</tr>
			</tbody>
		</table>
	</subsection>
	
	<subsection name="Affecting the implementation">
		<table>
			<thead>
				<tr>
					<th>Description</th>
					<th>Rationale</th>
					<th>Affected Parts</th>
				</tr>
			</thead> 
			<tbody>
				<tr>
					<td>[notes_with_title_and_text] Notes consist of content. They have no distinguished title in the implementation. Only the GUI may show the first n characters of the content as title, and the whole content as the text</td>
					<td></td>
					<td>basic functionality, usability</td>
				</tr>
				<tr>
					<td>[remote_personal_metadata] Personal metadata, that is e.g. first name, last name, telephone number, is not stored locally and is retrieved through the ICService. If you want to save the telephone number to a user A, user A should enter that information to the way the ICService retrieves data. However, this is outside the scope of the application, we may only handle retrieving/displaying.</td>
					<td>No handling of multiple local users.</td>
					<td>architecture, basic functionality</td>
				</tr>
				<tr>
					<td>[no_batch_tagging] It is assumed that the user may only manage tags at one object at a time. </td>
					<td>Additional functionality, not a problem per se</td>
					<td>usability</td>
				</tr>
				<tr>
					<td>[single_user] The application supports only one local user per project. This means there is no user switching, or identities like in mail clients.</td>
					<td>no user switching needed, less security issues</td>
					<td>architecture, basic functionality</td>
				</tr>
				<tr>
					<td>[no-supermetadata] Per se, it is unknown where the rootpath is. The application is called with the url of the database file and finds the rootpath in there. A list of database file may be implemented later as optional recent-project feature or in a central location. However, this is not a needed functionality.</td>
					<td>need for choosing a project after [single_project]</td>
					<td>architecture, UI</td>
				</tr>
				<tr>
					<td>[no-store-folders] We don't store a folder structure in the database.</td>
					<td>Duplicate effort, out of sync problems, brittle and inflexible structure</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>
						<p>[no-folder-model] As far as we can see, there is no need to model folders in our project. Such a internal tree would have some drawbacks: It is a very brittle structure, always having to be in sync with the file system. It is also very inflexible and needs effort to be maintained. 
						</p><p>
						Also, there is no need to have such a structure. Navigating through the rootpath and subfolders can be achieved by queriing the FSService. Lists of files, with relpath as key, are sufficient for internal handling, especially with our (defined) small amount of files.
						</p>
					</td>
					<td>Saves a lot of implementation</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td>[jakeobject-id] A Jakeobject has a String as identifier. For files, it is relpath, for notes it is "note:"+userid+timestamp of creation. This guarantees that two users can not create a object with the same id or know, if they talk about the same object.</td>
					<td>Duplicate effort, out of sync problems, brittle and inflexible structure</td>
					<td>architecture</td>
				</tr>
				<tr>
					<td><p>[conflicts] We define a conflict as the situation when a user has a local modification that he did not push (synchronise to others), and a log entry of changes on the same file come in from another user. Or, similarly, when the user makes a local change but did not start from the last version of the file, he has to resolve the conflict. </p>
					
						<p>When launching the file for editing, the program may recommend a syncing and warn, if a newer version exists, and recommend to pull it.</p>
						<!-- TODO: reference to sequence diagram -->
					</td>
					<td>definition</td>
					<td>architecture, implementation</td>
				</tr>
				
			</tbody>
			<thead>
				<tr>
					<th colspan="3">under discussion: </th>
				</tr>
			</thead>
			<tbody>
				<tr> 
					<td><p>[ascii] all objectnames, tags, userids may consist only of printable ascii characters (no umlauts, etc.)</p></td>
					<td>we don't want objects with strange characters not displayable on some systems</td>
					<td>architecture, UI</td>
				</tr>
				<tr> 
					<td> ... </td>
					<td> ... </td>
					<td> ... </td>
				</tr>
			</tbody>
		</table>
	</subsection>
	</section>
	
	<section name="Definition of words">
		<dl>
			<dt>ICService</dt>
			<dd>Interclient communication service</dd>
			<dt>SyncService</dt>
			<dd>Synchronisation service, uses ICService</dd>
			<dt>FSService</dt>
			<dd>File system service</dd>
			
			<dt>userid</dt>
			<dd>A userid is a user identifier that is globally unique and known in the context of the ICService (Interclient Communication Service)</dd>
			<dt>JakeObject</dt>
			<dd>Shared objects; the abstraction of notes, files and possibly more types</dd>
			<dt>rootpath</dt>
			<dd>Project directory path on the file system</dd>
			<dt>relpath</dt>
			<dd>Relative file path of files starting from the root path</dd>
		</dl>
	</section>
	
	<section name="Changelog">
		<table>
			<thead>
				<tr>
					<th>No.</th>
					<th>Date</th>
					<th>Author</th>
					<th>Change</th>
				</tr>
			</thead>
			<tr>
				<td>1</td>
				<td>2008-04-17</td>
				<td>simon</td>
				<td>created</td>
			</tr>
			<tr>
				<td>2</td>
				<td>2008-04-22</td>
				<td>simon</td>
				<td>added assumption to valid assumptions</td>
			</tr>
			<tr>
				<td>3</td>
				<td>2008-04-28</td>
				<td>simon</td>
				<td>added two assumptions</td>
			</tr>
			<tr>
				<td>4</td>
				<td>2008-04-28</td>
				<td>simon</td>
				<td>added two assumptions</td>
			</tr>
			<tr>
				<td>5</td>
				<td>2008-04-30</td>
				<td>simon</td>
				<td>Updated assumptions according to the meeting (2008-4-29)</td>
			</tr>
			<tr>
				<td>6</td>
				<td>2008-04-30</td>
				<td>johannes</td>
				<td>Incorporated decisions of tech-arch meeting</td>
			</tr>
		</table>
	</section>
	</body>
</document>
