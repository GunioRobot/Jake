<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Code Guidelines</title>

    <author email="chris@doublesignal.com">Christian Sutter</author>
  </properties>

  <body>
  	 
    <section name="Code Guidelines">
    In general, we should stick to the the <a href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Java Code Conventions</a> ("JCC"), except where the further conventions found below explicitly say otherwise or where it is absolutely necessary to deviate from the JCC for whatever reasons may come up.
       <subsection name="Naming">
       	<ul>
       		<li>Interfaces names always start with an <em>I</em>, e.g. <code>IICSService</code>.</li>
       		<li>Boolean methods/variables should be prefixed with <em>is</em> (or <em>can</em>, <em>has</em>, <em>should</em> depending on the situation) to improve legibility - e.g. <code>isFound</code>, <code>hasTag</code>, <code>canPush</code>, <code>shouldAbort</code>, ...</li>
       		<li>Negated boolean method/variable names should be avoided. This keeps people from getting headaches trying to figure out what <code>!isNoError</code> or <code>!hasNotBeenFound</code> really means.</li>
       		<li>Iterator variables in (nested) loops should be called <code>i</code>, <code>j</code>, <code>k</code>, etc., starting from the uppermost level of a loop.</li>
       		<li>Avoid abbreviating words that can be found in a dictionary, e.g. use <code>command</code> instead of <code>cmd</code>, <code>initialize</code> instead of <code>init</code>, etc. Acronyms however may be used, i.e. use <code>xml</code> instead of <code>ExtensibleMarkupLanguage</code>.</li>
       		<li>Constants should be prefixed with their "type" if there is more than one related constant, e.g. <code>COLOR_RED, COLOR_BLUE, COLOR_GREEN</code> instead of <code>RED, BLUE, GREEN</code>.</li>
       		<li>Exception classes should be suffixed with <em>Exception</em>, e.g. <code>FileNotFoundException</code>.</li>
       		<li></li>
       		<li>Use American English instead of British English (it's ugly, but more commonplace in the industry). This means: <code>color</code> instead of <code>colour</code>, <code>initialize</code> instead of <code>initialise</code>, etc. If unsure, <a href="http://dict.leo.org">LEO EN-DE</a> is your friend.</li>
       	</ul>
       </subsection>
       <subsection name="General Code">
       	<ul>
       		<li>Avoid using inner classes.</li>
       		<li>Avoid using magic numbers. Declare constants instead.</li>
       		<li>In <code>import</code> statements, try to group related packages together for an easier overview.</li>
       		<li>Unless you are importing five or more classes from the same package, explicitly list the imported items (instead of using the wildcard operator <code>*</code>).</li>
       		<li>Variables should be initialized where they are declared and should be declared within the smallest scope possible.</li>
       		<li>Avoid using do-while loops. Having to scroll all the way to the loops end to understand what it does is counterproductive. These should be rewritten as regular while loops.</li>
       		<li>Avoid using complex boolean expressions in conditionals. Instead, introduce temporary boolean variables. Aside from making the code more readable, this provides an additional degree of documentation:<br /><br />
       		<code>
       			bool isFinished = (elementNo &lt; 0) || (elementNo &gt; maxElement);<br />
       			bool isRepeatedEntry = elementNo == lastElement;<br />
       			if (isFinished || isRepeatedEntry) {<br />
       			&#160;&#160;&#160;doSomething();<br />
       			} <br />
       		</code>
       		<br />instead of<br /><br />
       		<code>
       		if ((elementNo &lt; 0) || (elementNo &gt; maxElement)|| elementNo == lastElement) { <br />
       		   &#160;&#160;&#160;doSomething();<br />
       		}<br />
       		</code></li>
       		<li><code>if-else</code>, <code>for</code> and <code>while</code> statements that only contain one statement can be written without brackets, e.g.:
       		<code><br />
       		if (condition)<br />
       		&#160;&#160;&#160;statement;<br /></code></li>
       	</ul>
       </subsection>
		 <subsection name="Formatting">
		    <ul>
			    <li>Keep file content within 80 columns.</li>
		    	<!--  TABS SUCK TABS SUCK TABS SUCK TABS SUCK TABS SUCK TABS SUCK -->
		    	<li>Indentation: Although the JCC doesn't express a preference for either spaces or tabs, tabs will be used exclusively for indentation (one tab per level). Spaces should only be used where indenting by <em>n</em> characters is explicitly wanted (such as lining up method parameters when the signature breaks the line).</li>
		    	<li>Whitespace:<ul>
		    	<li>Operators should be surrounded by a space character.</li>
<li>Java reserved words should be followed by a white space.</li>
<li>Commas should be followed by a white space.</li>
<li>Colons should be surrounded by white space.</li>
<li>Semicolons in for statements should be followed by a space character.</li>
<li>Example:<br /><br />
<code>
a = (b + c) * d; // NOT: a=(b+c)*d<br /><br />
while (true) { // NOT: while(true){<br /><br />
doSomething(a, b, c, d); // NOT: doSomething(a,b,c,d);<br /><br />
case 100 : // NOT: case 100:<br /><br />
for (i = 0; i &lt; 10; i++) { // NOT: for(i=0;i&lt;10;i++){<br /><br />
</code><br />
</li>
		    	</ul>
		    	</li>
		    	<li>Block layout should resemble the following example:<br /><br />
		    	<code>
		    	while (!done) {<br />
		    	&#160;&#160;&#160;doSomething();<br />
		    	&#160;&#160;&#160;done = moreToDo();<br />
		    	}<br /><br />
		    	</code>
		    	Opening brackets are on the same line as the statement starting the block (or the method signature etc.), separated by a space from the opening statement, closing brackets are on a separate line after the end of the block and are unindented.
		    	</li>
		    </ul>
       </subsection>
       <subsection name="Commenting">
       <ul>
       	<li>Write comments if, and only if, the logic ("<em>how?</em>") or the intention ("<em>why?</em>") behind a piece of code isn't self-explanatory or clear from the immediate context:  <strong>Do not overcomment.</strong> This only leads to confusion and a hard-to-read codebase. In general, however, extremely tricky code should not be commented, but rewritten.</li>
       	<li>"C-Style" comments (<code>/* xxx */</code>, block and single-line comments as per the JCC) should be used exclusively instead of rest-of-line comments (// xxx) in order to promote legibility and consistency throughout the code. If feasible, use single-line comments instead of trailing comments in order to make them more visible.</li>
       	<li>Comments should be indented relative to their relevance to the code.</li>
    		<li>Explicitly mention situations where you are deviating from "standard procedure" so that other people are not tempted to correct what they think is a mistake. This includes, for example, items in <code>switch</code> statements that do not contain a <code>break</code> statement because the "fallthrough" behaviour is explicitly wanted.</li>
       	<li>JavaDoc should be used exclusively for class/function comments. These should not contain information about date/time of a change (this information can be obtained by means of the SVN log) or (meta-)information about the entire project. Use the <code>@author</code> annotation to signal who wrote the file or made significant changes to it, without listing all project members, as a way of displaying the developers who <strong>really</strong> know their way around whatever is in that file.</li>
       	<li>Don't forget package comments! These are created by means of an <code>index.html</code> file in the package directory.</li>
       </ul>
       </subsection>
       <subsection name="Exception Handling">
       	<ul>
       		<li>All exceptions should contain a public constructor that accepts a <code>String</code> as its argument and then calls the constructor of the superclass with it.<br /><br />Example:<br />
       		<code>
       		class FooException extends Exception {<br />
       		&#160;&#160;&#160;public FooException(String message) {<br />
       		&#160;&#160;&#160;&#160;&#160;&#160;super(message);<br />
       		&#160;&#160;&#160;}<br />
       		}<br />
       		</code>
       		<br />
       		</li>
       		<li>The failure of a method call should never be shown only by a side effect or a certain return value. Returning <code>null</code> is a bad practice, unless <code>null</code> is a valid and useful return value for the method.</li>
       		<li>Exceptions should always contain a concise textual description of why/how the error occured in their message. Do not say anything that is already clear by the Exceptions name or hierarchy, but provide additional information.</li>
       	</ul>
       </subsection>
       <subsection name="Java5+ Features">
		 	<ul>
		 		<li>The <code>@Override</code> annotation should be used when overriding a method from a superclass. This allows the compiler to issue an error when there is no such method in the class hierarchy, thus preventing possible errors.</li>
		 		<li>The <code>@SuppressWarnings</code> annotation should not be used, however. Should this prove absolutely necessary (which is highly unlikely), this needs to be discussed with the group first.</li>
		 		<li>Generics and collections must be used in any situation where it is feasible. Explicit casting should be reduced to a minimum (although Spring requires some explicit casting as many methods only return <code>java.lang.Object</code>.</li>
		 		<li>Enhanced <code>for</code> loops should be used instead of iterators where feasible, as they improve code readability.</li>
		 	</ul>
		 </subsection>
    </section>
    
    <section name="Changelog">
      <table>
        <thead>
        <tr>
          <th>No.</th>
          <th>Date</th>
          <th>Author</th>
          <th>Change</th>
        </tr>
        </thead>
			<tr>
          <td>2</td>
          <td>20.05.2008</td>
          <td>CS</td>
          <td>revised, added some further information</td>
        </tr>
        <tr>
          <td>1</td>
          <td>15.05.2008</td>
          <td>CS</td>
          <td>created</td>
        </tr>
      </table>
    </section>
  </body>
</document>
