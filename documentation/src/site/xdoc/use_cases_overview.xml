<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Use Cases Overview</title>

    <author email="me@simonwallner.at">Simon Wallner</author>
    <author>Johannes Buchner</author>
    <author email="dominik.dorn@gmail.com">Dominik Dorn</author>
	 <author email="philipp.knobelspies@gmail.com">Philipp Knobelspies</author>
  </properties>
  <body>
<style>
h5{
font-size:medium;
padding: 0;
margin: 0.2cm 0;
}
</style>
    <section name="Use Cases">
    	<p>This page contains an overview of all use cases. Use cases are listed with a descriptive title and link to the full use case description. Every use case is identified by an unique identifier using the following syntax: [UC-&lt;Number&gt;]</p>
		
    	<subsection name="Overview">
			<ul>
				<li>
					[UC-01] Offline Content Management
					<ul>
						<li><a href='#uc_01_01'>[UC-01:01] Show project folder</a></li>
						<li><a href='#uc_01_02'>[UC-01:02] Import file/folder</a></li>
						<li><a href='#uc_01_03'>[UC-01:03] Delete object</a></li>
						<li><a href='#uc_01_04'>[UC-01:04] Open file/folder with external application</a></li>
						<li>
							<a href='#uc_01_05'>[UC-01:05] View/manage file/note tags</a>
							<ul>
								<li><a href='#uc_01_05_01'>[UC-01:05:01] Add tag</a></li>
								<li><a href='#uc_01_05_02'>[UC-01:05:02] Remove tag</a></li>
								<li><a href='#uc_01_05_03'>[UC-01:05:03] Alter tag</a></li>
							</ul>
						</li>
						<li><a href='#uc_01_06'>[UC-01:06] Find object by name or tag</a></li>
						<li>
							<a href='#uc_01_07'>[UC-01:07] View/manage notes</a>
							<ul>
								<li><a href='#uc_01_07_01'>[UC-01:07:01] Create note</a></li>
								<li><a href='#uc_01_07_02'>[UC-01:07:02] Edit note</a></li>
								<li><a href='#uc_01_07_03'>[UC-01:07:03] Delete note</a></li>
							</ul>
						</li>
						<li><a href='#uc_01_08'>[UC-01:08] Refresh datapool view</a></li>
						<li><a href='#uc_01_09'>[UC-01:09] Set soft lock</a></li>
	
					</ul>
				</li>
				<li>
					[UC-02] Networking
					<ul>
						<li><a href='#uc_02_01'>[UC-02:01] Log-in to the network</a></li>
						<li><a href='#uc_02_02'>[UC-02:02] Logout from the network</a></li>
					</ul>
				</li>
				<li>
					[UC-03] Synchronisation
					<ul>
						<li><a href="#uc_03_01">[UC-03:01] Propagate local changes</a></li>
						<li><a href="#uc_03_02">[UC-03:02] Pull file from project member</a></li>
						<li><a href="#uc_03_03">[UC-03:03] Set push/pull behaviour preferences</a></li>
						<li><a href="#uc_03_04">[UC-03:04] View object log</a></li>
						<li><a href="#uc_03_05">[UC-03:05] Resolve version conflict</a></li>
					</ul>
				</li>
				<li>
					[UC-04] Manage Project
					<ul>
						<li><a href='#uc_04_01'>[UC-04:01] Create new project</a></li>
						<li>
							<a href='#uc_04_02'>[UC-04:02] View/manage project members</a>
							<ul>
								<li><a href='#uc_04_02_01'>[UC-04:02:01] Add project member</a></li>
								<li><a href='#uc_04_02_02'>[UC-04:02:02] Alter project member</a></li>
								<li><a href='#uc_04_02_03'>[UC-04:02:03] Remove project member</a></li>
								<li><a href='#uc_04_02_04'>[UC-04:02:04] Set local nickname for a project member</a></li>
								<li><a href='#uc_04_02_05'>[UC-04:02:05] Set local comment for project member</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li>
					[UC-05] Manage Messages
					<ul>
						<li><a href='#uc_05_01'>[UC-05:01] Send message to project member</a></li>
						<li><a href='#uc_05_02'>[UC-05:02] Read incoming message</a></li>
					</ul>
				</li>
				<li><a href="#uc_06"> [UC-06] Edit application preferences</a></li>
			</ul>		 
		</subsection>


    	<subsection name="Stable states">
			<table>
				<thead>
					<tr>
						<th>id</th>
						<th>stable states</th>
						<th>description</th>
					</tr>
				</thead>
				<tr>
					<td>[ST-01-started]</td>
					<td>application started</td>
					<td>The application is started</td>
				</tr>
				<tr>
					<td>[ST-02-loaded]</td>
					<td>project is loaded</td>
					<td>
						<ul>
							<li>[ST-01-started]</li>
							<li>a project is loaded and there is a project folder</li>
							<li>[UC-01:01] is executed every time this state is entered</li>
						</ul>
					</td>
				</tr>
			</table>
		</subsection>
	</section>
	
	<section name="Use Case Description">
				
		<subsection name="[UC-01:01] Show datapool"><a name="uc_01_01" />
			<h5>Summary</h5>
			Show the objects (files and notes) in the datapool. 
			The files in the project folder shall be browsable in a hierarchy, just like they exist on the file system. A view based on tags is available under "[UC-01:06] Find object by name or tag".
			
			<h5>Rationale</h5>
			The user wants to view the files belonging to the project to start further actions.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates that the application is to show the datapool and its contents</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			
			<h5>Postconditions</h5>
			All objects in the project are displayed hierarchically.<br />
			Fields that may be displayed are: file name, last changed, name of the user who last edited the file, sync-status: in-sync, locally-changed (which means not pushed yet), remotely-changed (which means not pulled yet).
			
			<h5>Frequency of use</h5>
			5
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			
		</subsection>
		
		<subsection name="[UC-01:02] Import file/folder"><a name="uc_01_02" />
			<h5>Summary</h5>
			The user adds a file/folder to the project, which means the files or folders will be copied into the project folder, maintaining the files hierarchy.
			
			<h5>Rationale</h5>
			For quick and easy sharing of files, the user should not have to perform the copy operation in the filesystem. The user wants to share some of his files with other members, but has them placed elsewhere in the filesystem.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates that he/she wants to add a file/folder to the project.</li>
				<li>A list of possible files from the users file system is presented.</li>
				<li>The user selects a file or a folder and indicates to add this file/folder.</li>
				<li>The file/folder is copied into the project folder.</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			<p>
		 	In 4. if the file is already in the project datapool, a error is prompted to the user, since you cannot import something from the project folder into the project folder. The application returns to its previous state.
			</p><p>
			If the user cancels the operation no file/folder will be imported to the project. The application returns to its previous state.
			</p><p>
			
			A read error or permission problem on copying might occur. In that case the user is informed.
			</p>

			<h5>Postconditions</h5>
			<ul>
				<li>The specified file is in the datapool.</li>
				<li>The application returns to its previous state.</li>
			</ul>

			<h5>Frequency of use</h5>
			2
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			
		</subsection>
		
		<subsection name="[UC-01:03] Delete object"><a name="uc_01_03" />
			<h5>Summary</h5>
			An object should be removed from the datapool.
			
			<h5>Rationale</h5>
			The user wants to remove objects from the project root, e.g. because they are out-of-date.
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02-loaded]</li>
				<li>at least one object exists in the project</li>
			</ul>
			
			<h5>Course of events</h5>
			<ol>
				<li>The user selects an objects from the datapool.</li>
				<li>The user indicates that he/she wants to delete the object.</li>
				<li>The user is prompted if he/she really wants to delete the object.</li>
				<li>The object is removed from the datapool.</li>
			</ol>
			
			<h5>Exceptions</h5>
			If the file can not be accessed, a warning is prompted to the user.
			
			<h5>Alternative paths</h5>
			In 4. if the object is soft locked the locking comment is prompted to the user. The user may chose to cancel the operation or to ignore the lock.<br />
			If the object is a folder, the user is asked if he really wants to delete the folder and the files contained. <br />
			In 3. the user may cancel the operation. The application returns to its previous state.
			
			<h5>Postconditions</h5>
			The object is deleted from the project, the application returns to its previous state
			
			<h5>Frequency of use</h5>
			2
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>Propagation of change: A LogEntry with the action "delete" is added. 
			The other users may or may not be asked to accept the change (maybe a preference setting).
			</p>
			
		</subsection>
		
		<subsection name="[UC-01:04] Open file/folder with external application"><a name="uc_01_04" />
			<h5>Summary</h5>
			The user wants to open a file with an external application, i.e. the one associated with the file.
			
			<h5>Rationale</h5>
			Since viewing and editing files is not integrated in Jake, there must be a way to open data in an external application. 
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02-loaded]</li>
				<li>At least one file exists in the project.</li>
				<li>The operating system supports a method of launching the application associated with a file.</li>
			</ul>
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to open an object in an external application.</li>
				<li>The operating system is told to call an external application for editing the file.</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			An error may occur during the process. In that case the user is prompted with an error message.
			
			<h5>Postconditions</h5>
			The object is opened in an external application, the application returns to its previous state.
			
			<h5>Frequency of use</h5>
			5
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>What happens if no application is connected to the file type? Does the OS prompt a "pick app to open file" dialog?</p>
			
		</subsection>
		
		<subsection name="[UC-01:05] View/manage file/note tags"><a name="uc_01_05" />
			<h5>Summary</h5>
			The user may manage tags associated to a file/note.
			
			<h5>Rationale</h5>
			Tagging for a not only hierarchical view of the objects is a key feature.
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02-loaded]</li>
				<li>The object to be tagged exists in the project</li>
			</ul>
			
			<h5>Course of events</h5>
			<ol>
				<li>The user select a file/note from the project and indicates to manage its tags</li>
				<li>All current tags are listed.</li>
				<li>The user indicates to return to the previous state.</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			
			<h5>Postconditions</h5>
			The changes are stored, the application returns to its previous state.
			
			<h5>Frequency of use</h5>
			3
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-01:05:01] Add tag"><a name="uc_01_05_01" />
			<h5>Summary</h5>
			The user may add/apply a tag to a file/note.
			
			<h5>Rationale</h5>
			See [UC-01:05]
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02-loaded]</li>
				<li>The object to be tagged exists in the project</li>
				<li>This UC is accessed from within [UC-01:05]</li>
			</ul>
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to add a tag</li>
				<li>The user specifies the tag name</li>
				<li>the user indicates to save the tag</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 3. if the object is soft locked the locking comment is prompted to the user. The user may choose to cancel the operation or to ignore the lock.<br />
			In 3.: If the user indicates to cancel the operation, no change will be performed.
			
			<h5>Postconditions</h5>
			The changes are stored, the application returns to its previous state. (e.g. [UC-01:05]
			
			<h5>Frequency of use</h5>
			4
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			
		</subsection>
		
		<subsection name="[UC-01:05:02] Remove tag"><a name="uc_01_05_02" />
			<h5>Summary</h5>
			The user may remove a tag from a file/note.
			
			<h5>Rationale</h5>
			See [UC-01:05]
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02-loaded]</li>
				<li>The object to be tagged exists in the project</li>
				<li>The object has at least one tag</li>
				<li>This UC is accessed from within [UC-01:05]</li>
			</ul>
			
			<h5>Course of events</h5>
			<ol>
				<li>The user selects a tag</li>
				<li>The user indicates to delete the tag</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 3. if the object is soft locked the locking comment is prompted to the user. The user may chose to cancel the operation or to ignore the lock.<br />
			
			<h5>Postconditions</h5>
			The changes are stored, the application returns to its previous state. (e.g. [UC-01:05]
			
			<h5>Frequency of use</h5>
			4
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			
		</subsection>
		
		<subsection name="[UC-01:05:03] Alter tag"><a name="uc_01_05_03" />
			<h5>Summary</h5>
			The user may alter a tag for a certain object.
			
			<h5>Rationale</h5>
			See [UC-01:05]; Also, the user may have mistyped the tag when adding it.
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02]</li>
				<li>The object to be tagged exists in the project</li>
				<li>This UC is accessed from within [UC-01:05]</li>
			</ul>
			
			<h5>Course of Events</h5>
			<ol>
				<li>The user indicates to alter a tag</li>
				<li>The user specifies a new tag name</li>
				<li>the user indicates to save the tag</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 3. if the object is soft locked the locking comment is prompted to the user. The user may chose to cancel the operation or to ignore the lock.<br />
			In (3), if the user indicates to cancel the operation, no change will be performed.
			
			<h5>Postconditions</h5>
			The changes are stored, the application returns to its previous state. (e.g. [UC-01:05]
			
			<h5>Frequency of use</h5>
			1
			
			<h5>Priority</h5>
			3
			
			<h5>Open issues</h5>
			<p>For implementation, this is first a remove of the old tag and a add of the new tag; Especially for the sync.
			Also, this use case is no global tag rename (project-wise renaming a tag), but the changing of a tag for one object.
			</p>
		</subsection>
		
		<subsection name="[UC-01:06] Find object by name or tag"><a name="uc_01_06" />
			<h5>Summary</h5>
			List all objects whose name matches the search term or which contain the tag that was searched for.
			
			<h5>Rationale</h5>
			Finding objects either by name, tag or both.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to perform a search.</li>
				<li>The user enters a search term.</li>
				<li>The user may choose to only search for matching filenames, or tags, or both.</li>
				<li>The user indicates to perform the search.</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In (4) the user may cancel the operation, the application returns to its previous state.
			
			<h5>Postconditions</h5>
			All matching Objects in the project are listed similar to [UC-01:01].
			
			<h5>Frequency of use</h5>
			1
			<h5>Priority</h5>
			3
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-01:07] View/manage notes"><a name="uc_01_07" />
			<h5>Summary</h5>
			View all notes in the project.
			
			<h5>Rationale</h5>
			For a project, not only files are important. Notes, containing additional information and news concerning the project are a key feature of Jake.
			
			<h5>Preconditions</h5>
			<ul>
				<li>[ST-02-loaded]</li>
			</ul>
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to view all notes in the project</li>
				<li>All notes are listed. <br />
				Displayed fields: the first line of the note as title, the following lines as text</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			
			<h5>Postconditions</h5>
			The notes are listed. Also, the last editor and last edit date may be shown.
			
			<h5>Frequency of use</h5>
			4
			
			<h5>Priority</h5>
			2
			
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-01:07:01] Create note"><a name="uc_01_07_01" />
			<h5>Summary</h5>
			The user creates a new note.
			
			<h5>Rationale</h5>
			See [UC-01:07]
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to create a new note</li>
				<li>The user enters the text of the note</li> 
				<li>The user indicates to save the note</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In (3), if the user indicates to cancel the operation, no note will be created

			<h5>Postconditions</h5>
			A new note is created and the application returns to its previous state. (e.g. [UC-01:07]
			
			<h5>Frequency of use</h5>
			2
			<h5>Priority</h5>
			2
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-01:07:02] Edit note"><a name="uc_01_07_02" />
			<h5>Summary</h5>
			The user edits a note.
			
			<h5>Rationale</h5>
			See [UC-01:07]
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to edit a note</li>
				<li>The note is displayed in editable form</li> 
				<li>The user edits the text of the note</li>
				<li>The user indicates to save the changes</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 4. if the object is soft locked the locking comment is prompted to the user. The user may chose to cancel the operation or to ignore the lock.<br />
			In (4), if the user indicates to cancel the operation, no note will be created

			<h5>Postconditions</h5>
			The note is altered and the application returns to its previous state. (e.g. [UC-01:07]
			
			<h5>Frequency of use</h5>
			2
			<h5>Priority</h5>
			2
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-01:07:03] Remove note"><a name="uc_01_07_03" />
			<h5>Summary</h5>
			The user removes a note.
			
			<h5>Rationale</h5>
			See [UC-01:07]
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user selects a note and indicates to remove it</li>
				<li>The user is prompted to confirm the removal</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 1. if the object is soft locked the locking comment is prompted to the user. The user may chose to cancel the operation or to ignore the lock.<br />
			In (2), if the user indicates to cancel the operation, no note will be created

			<h5>Postconditions</h5>
			The note is removed and the application returns to its previous state. (e.g. [UC-01:07]
			
			<h5>Frequency of use</h5>
			2
			<h5>Priority</h5>
			2
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-01:08] Refresh datapool view"><a name="uc_01_08" />
			<h5>Summary</h5>
			Refreshing the datapool view means that the application tries to connect to other project members and fetch their log to inform itself about new and changed objects etc. 
			
			<h5>Rationale</h5>
			For staying up-to-date, and displaying the files available from others.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to refresh the datapool view</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			
			<h5>Postconditions</h5>
			The Information displayed in [UC-01:01] is refreshed.
			
			<h5>Frequency of use</h5>
			3
			
			<h5>Priority</h5>
			4
			
			<h5>Open issues</h5>
			In implementation, this is logsync (see definition in assumptions).
			
		</subsection>
	
		<subsection name="[UC-01:09] Set soft lock"><a name="uc_01_09" />
			<h5>Summary</h5>
			Setting a soft lock for an object means, that others are informed that a certain user does not want others to change a file. The lock is "soft" in the sense that the user is only warned and it can be overruled. 
			
			<h5>Rationale</h5>
			For showing other users, that one is working on a certain set of file, locks make sense. However, these locks should not block the work of others nor make them dependant.
			
			<h5>Preconditions</h5>
			[ST-02-loaded], at least one file exists in the project
			
			<h5>Course of events</h5>
			<ol>
				<li>The user selects a file and indicates to set the soft lock</li>
				<li>The user sets the locking comment. </li>
				<li>The user indicates to save the locking comment</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			If 2. if the user leaves the comment empty no soft lock is set. <br />
			If the user cancels the operation no changes are saved, the application returns to its previous state.
			
			<h5>Postconditions</h5>
			A soft lock is set for the object.
			
			<h5>Frequency of use</h5>
			3
			
			<h5>Priority</h5>
			4
			
			<h5>Open issues</h5>
			<p>For implementation: A action in the log, e.g. set-lock and unset-lock, is performed. For checking if a file is locked (and who locked it), the log is scanned from bottom up.</p>
			
		</subsection>

		<subsection name="[UC-02:01] Login to the network"><a name="uc_02_01" />
			<h5>Summary</h5>
			The user logs in to the network. For the used network layer (ICService), credentials are needed.
			
			<h5>Rationale</h5>
			The sharing operations are built on top of a network service which has to be available. It is made available by a log-in operation.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
				<ol>
					<li>The user indicates to log-in to the network.</li>
					<li>The user enters the credentials.</li>
					<li>The user may choose to store the credentials.</li>
					<li>If so, the user may choose to automatically log-in every time the app is started.</li>
					<li>The user indicates to submit the log-in data.</li>
					<li>The user is logged-in on the network.</li>
				</ol>
			
			<h5>Exceptions</h5>
				If the application is unable to communicate with the network, a warning is prompted to the user. The application returns to its previous state.
			
			<h5>Alternative paths</h5>
				In (5), if the credentials are not valid, the user is not logged in and a error is prompted to the user. The user may restart the use case. <br />
				In (2), if the credentials are stored already, jump to step (5)

			<h5>Postconditions</h5>
				The user is logged in. 
			<h5>Frequency of use</h5>
				4
			<h5>Priority</h5>
				5
			<h5>Open issues</h5>
						
		</subsection>

		<subsection name="[UC-02:02] Logout from the network"><a name="uc_02_02" />
			<h5>Summary</h5>
				The user logs out from the network for performing a proper disconnect.
			
			<h5>Rationale</h5>
				The user wants to work offline.

			<h5>Preconditions</h5>
			[ST-02-loaded]

			<h5>Course of events</h5>
				<ol>
					<li>The user indicates to logout</li>
					<li>The user is logged out</li>
				</ol>
			<h5>Exceptions</h5>

			<h5>Alternative paths</h5>
				<ul>
					<li>(1) The user closes the application, logout is performed automatically</li>
				</ul>
			<h5>Postconditions</h5>
			[ST-02-loaded]
			
			<h5>Frequency of use</h5>
			2
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
	
		</subsection>
		
		<subsection name="[UC-03:01] Propagate locally changed file"><a name="uc_03_01" />
			<h5>Summary</h5>
			After one modified a file, for showing and notifying others that changes have been made, the information is propagated. Others then may perform "[UC-01:08] Refresh datapool view" and "[UC-03:02] pull file from project member"
			
			<h5>Rationale</h5>
			See above.
			
			<h5>Preconditions</h5>
			[ST-02-loaded], at least one file exist in the project, at least one file has been changed locally
			
			<h5>Course of events</h5>
			<ul>
				<li>The user indicates to propagate the changes made to the file</li>
			</ul>
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 1. if the object is soft locked the locking comment is prompted to the user. The user may chose to cancel the operation or to ignore the lock.<br />
			If a version conflict occurs during the operation, [UC-03:05] is started.<br />
			Notifying others that changes exist is based on best-effort. 
			Failures in the network service may be displayed to the user as warnings.<br />
			
			<h5>Postconditions</h5>
			The information about the changes of a file is propagated to all available users, which allows them to start "[UC-03:02] Pull file from project member".
			
			<h5>Frequency of use</h5>
			5
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>For implementation, see the definition of [push] in assumptions</p>
			<p>It is not necessary to be online to propagate changes. It simply means that that the user has finished working on a file that may now be distributed.<br />
			Dominik: WTF? How can we propagate changes if we're not online? We don't have the &quot;Magic stuff happens here&quot; cloud anymore... <br />
			Johannes: push reflects that one is done with certain work. In other words, you identify a state of the file that others may want to see. Going online and letting others perform a sync against your log can be done at another time.
			</p>
			
		</subsection>

		<subsection name="[UC-03:02] Pull file from project member"><a name="uc_03_02" />
			<h5>Summary</h5>
			Pulling files from other project members means that the file is actually downloaded and its content is placed in the file system. Before that, the available files are already shown in the datapool.
			
			<h5>Rationale</h5>
			The user wants to retrieve files from other members he/she is interested in. This may not be the case for all file, e.g. to save bandwidth.
			
			<h5>Preconditions</h5>
			[ST-02-loaded], at least one project member with one file exists in the project.
			
			<h5>Course of events</h5>
			<ul>
				<li>All available files are listed.</li>
				<li>The user selects a file and indicates to pull it.</li>
			</ul>
			
			<h5>Exceptions</h5>
			Failures in the network service may be displayed to the user as warnings.
			
			<h5>Alternative paths</h5>
			If the user has a modified local copy (for example "[UC-03:05] Resolve version conflict" has been aborted), he/she is asked for confirmation.
			
			<h5>Postconditions</h5>
			The file is available in the file system and "[UC-01:04] Open file/folder with external application" may be started.
			
			<h5>Frequency of use</h5>
			5
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>

		</subsection>

		<subsection name="[UC-03:03] Set push/pull behaviour preferences"><a name="uc_03_03" />
			<h5>Summary</h5>
			The options autopush and autopull may be enabled or disabled separately. 
			Autopush means that "[UC-03:01] Propagate local changes" is automatically started when the application detects a file change.
			Autopull means that "[UC-03:02] Pull file from project member" is automatically started when it is known that a new version is available. 
			
			<h5>Rationale</h5>
			Autopull may be bandwidth-intense. 
			
			If one saves a file more than once while in the middle of work, or it is still in a draft state, you may want to prevent others to believe it is done and even to read the preliminary version.
			Also, it might be valuable to enter commit messages in "[UC-03:02] Pull file from project member", which may be skipped in automation.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ul>
				<li>The user indicates to set the projects push/pull behaviour</li>
				<li>The user sets the behaviour, options are: auto/manual push, auto/manual pull</li>
			</ul>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			
			<h5>Postconditions</h5>
			The push/pull behaviour preferences are set for the project.
						
			<h5>Frequency of use</h5>
			2
			
			<h5>Priority</h5>
			3
			
			<h5>Open issues</h5>

		</subsection>

		<subsection name="[UC-03:04] View object log"><a name="uc_03_04" />
			<h5>Summary</h5>
			Viewing the log that correspond to a object.
			
			<h5>Rationale</h5>
			The user may want to see what happened to a file over time: Who edited it when, and why (commit messages).
			
			<h5>Preconditions</h5>
			[ST-02-loaded], at least one object exists in the project.
			
			<h5>Course of events</h5>
			<ul>
				<li>The user selects a file from the project and indicates to view its log.</li>
				<li>The log of the file is displayed.</li>
				<li>The user closes the log.</li>
			</ul>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 1. if no file is selected the complete log for all files is displayed.
			
			<h5>Postconditions</h5>
			The log is shown, and may display the user that performed the changes, the commit messages, and the corresponding dates. The application returns to its previous state.
			
			<h5>Frequency of use</h5>
			1
			
			<h5>Priority</h5>
			3
			
			<h5>Open issues</h5>
			<p>
			Dominik: I thought it would be possible to view the whole project log, which gets reduced
			if one or more specific files/objects are selected (like &quot; select * from projectlog &quot; and if a file is selected, simply add a where clause. )
			<br />
			Johannes: Indeed. However it is arguable, that this is a appliance of this use case to all objects, regardless of how it might look in the user interface. Again, use cases, technical details and the user interface should not get mixed up here.
			</p>
		</subsection>

		<subsection name="[UC-03:05] Resolve version conflict"><a name="uc_03_05" />
			<h5>Summary</h5>
			Resolving a version conflict means, that the user has to decide between two versions of a file.
			
			<h5>Rationale</h5>
			Version conflicts may occur during the propagation of changes. Those need to be treated carefully.
			
			<h5>Preconditions</h5>
			"[UC-03:01] Propagate local changes" has been executed, and a version conflict occurred.
			
			<h5>Course of events</h5>
			<ul>
				<li>The filename, last-changed, last-changed-by are displayed for the two files in conflict.</li>
				<li>The user may directly open both files in an external application.</li>
				<li>The user may decide to keep one version or manually merge both files into a new version.</li>
			</ul>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			The user may also abort the conflict resolution. He/she then has to resolve the conflict later.
			
			<h5>Postconditions</h5>
			The conflict has been resolved.
			
			<h5>Frequency of use</h5>
			3
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>
				For implementation: opening the remote version is done by performing a pull to a temporary file.
			</p>

		</subsection>

		<subsection name="[UC-04:01] Create new project"><a name="uc_04_01" />
			<h5>Summary</h5>
				The user creates a new project.

			<h5>Rationale</h5>
				This use case is the start point for most of the other operations. Having a name and a project folder set is essential.

			<h5>Preconditions</h5>
				[ST-01-started]	

			<h5>Course of events</h5>
				<ol>
					<li>The user indicates to create a new project</li>
					<li>The user is prompted to chose a name and a project folder in the local file system.</li> 
					<li>The user indicates to create the project</li>
				</ol>
			<h5>Exceptions</h5>
			If the project folder cannot be created a warning is prompted to the user.

			<h5>Alternative paths</h5>
			In 3. if the user cancels the operation no project is created, the application returns to its previous state.

			<h5>Postconditions</h5>
			A new project has been created. [ST-02-loaded] is reached and "[UC-01:01] Show project folder" is executed. The user might also want to do "[UC-04:02] view/manage project members" now. 
			
			<h5>Frequency of use</h5>
			1

			<h5>Priority</h5>
			5

			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-04:02] View/manage project members"><a name="uc_04_02" />
			<h5>Summary</h5>
			Display all project members that are associated with the project.
			
			<h5>Rationale</h5>
			The user wants to know and define who works on the project, and who has access to the data.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to view all project members</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			The user may indicate to only display members that are currently online.
			
			<h5>Postconditions</h5>
			All project members are listed in alphabetical order. Displayed fields: name, online status (online, offline, unknown). 
			
			The use cases below may be started now.
			
			<h5>Frequency of use</h5>
			3
			
			<h5>Priority</h5>
			3
			
			<h5>Open issues</h5>
			
		</subsection>

		<subsection name="[UC-04:02:01] Add project member"><a name="uc_04_02_01" />
			<h5>Summary</h5>
			Add a project member to the project.
			
			<h5>Rationale</h5>
			See [UC-04:02]
			
			<h5>Preconditions</h5>
			[ST-02-loaded] or the application is in the state of the postcondition of this UC
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to add a project member</li>
				<li>The user enters a user ID</li>
				<li>The user indicates to add the project member.</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
				In 3. the user may cancel the operation, the application returns to its previous state.
			
			<h5>Postconditions</h5>
			The new project member is added to the project.
			
			<h5>Frequency of use</h5>
			2
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>For implementation: At this point, no existence check is implemented (which would be depending on the ICService), nor a invite feature.
			</p>
		</subsection>
		
		<subsection name="[UC-04:02:02] Alter project member"><a name="uc_04_02_02" />
			<h5>Summary</h5>
			Edit a project member
			
			<h5>Rationale</h5>
			See [UC-04:02]. Also, the user wants to edit a project member in case he/she mistyped.
			
			<h5>Preconditions</h5>
			[ST-02-loaded] or the application is in the state of the postcondition of this UC.<br />
			At least one project member exists in the project.
			
			<h5>Course of events</h5>
			<ol>
				<li>The user selects a project member and indicates to edit it.</li>
				<li>The user edits the user ID</li>
				<li>The user indicates to save the changes.</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
				In 3. the user may cancel the operation, the application returns to its previous state.
			
			<h5>Postconditions</h5>
			The project member is edited.
			
			<h5>Frequency of use</h5>
			1
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>
			Dominik: I don't think this should be possible, since the userid gets confirmed by the ICService. <br />
			Simon: We need to provide this uc, see the rationale for clarification. If I mistype a user ID I want to change it.<br />
			Johannes: Simon has a point there.
			</p>
		</subsection>

		<subsection name="[UC-04:02:03] Remove project member"><a name="uc_04_02_03" />
			<h5>Summary</h5>
			Remove a member from the project.
			
			<h5>Rationale</h5>
			See [UC-04:02]
			
			<h5>Preconditions</h5>
			[ST-02-loaded] or the application is in the state of the postcondition of this UC<br />
			At least one member exists in the project.
			
			<h5>Course of events</h5>
			<ol>
				<li>The user selects a project member and indicates to remove it.</li>
				<li>The user is prompted to confirm the removal</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
				In 2. the user may cancel the operation, the application returns to its previous state.

			<h5>Postconditions</h5>
			The project member is deleted from the project.			

			<h5>Frequency of use</h5>
			1
			
			<h5>Priority</h5>
			5
			
			<h5>Open issues</h5>
			<p>
			Dominik: I don't think we should implement this, because we have no rights management in phase 1
			and therefor cannot allow users to remove others from the project. Without rights management, this
			could lead to serious synchronisation problems (e.g. user a deletes user c, user c adds a file to the project, user b pulls it and redistributes the log to a, but a doesn't know of c anymore -> invalid state.)<br />
			Johannes: Not a problem. In our not-invited world, where we assume that everyone has manually configured exactly the same project members list (don't tell me that sucks), this just defines userids the ICService talks to.
			
			</p>
		</subsection>
		
		<subsection name="[UC-04:02:04] Set local nickname for a project member"><a name="uc_04_02_04" />
			<h5>Summary</h5>
			Setting a nickname for a project member.
			
			<h5>Rationale</h5>
			Having nicknames makes it easier to recognise individual project members (rather than user IDs).

			<h5>Preconditions</h5>
			[ST-02-loaded]

			<h5>Course of events</h5>
			<ul>
				<li>The user selects a project member and indicates to set a nickname.</li>
				<li>The user enters a nickname</li>
				<li>The user indicates to save the new nickname</li>
			</ul>

			<h5>Exceptions</h5>

			<h5>Alternative paths</h5>
			In 2. if no nickname is entered the user id is used instead<br />
			In 3. if the user cancels the operation no changes are saved, the application returns to its previous state.

			<h5>Postconditions</h5>
			A new nickname is set for a project member.
			
			<h5>Frequency of use</h5>
			2
			
			<h5>Priority</h5>
			3
			
			<h5>Open issues</h5>
		</subsection>

		<subsection name="[UC-04:02:05] Set local comment for project member"><a name="uc_04_02_05" />
			<h5>Summary</h5>
			A local comment is set for a project member.
			
			<h5>Rationale</h5>
			The user may want to add a comment to a project member (e.g. additional contact info, <!-- that the guy is an ass, --> etc.) that is not shared with other members.
			
			<h5>Preconditions</h5>
			[ST-02-loaded]
			
			<h5>Course of events</h5>
			<ul>
				<li>The user select a project member and indicates to set the local comment.</li>
				<li>The user enters a comment (plain text).</li>
				<li>The user indicates to save the comment</li>
			</ul>
			
			<h5>Exceptions</h5>
			
			
			<h5>Alternative paths</h5>
			In 3. the user may indicate to cancel the operation, the application returns to its previous state.
			
			<h5>Postconditions</h5>
			The comment is set.
			
			<h5>Frequency of use</h5>
			2
			
			<h5>Priority</h5>
			2
			
			<h5>Open issues</h5>
		</subsection>

		<subsection name="[UC-05:01] Send message to project member"><a name="uc_05_01" />
			<h5>Summary</h5>
			Sending a message to another project member.
			
			<h5>Rationale</h5>
			The user may want to send short messages concerning the project to other project members from within the application. If the used network service (ICService) is capable of storing the message, the message may even be left to users currently offline (and displayed to them later).
			
			<h5>Preconditions</h5>
			[ST-02-loaded], at least two project member exists in the project
			
			<h5>Course of events</h5>
			<ol>
				<li>The user indicates to write a new messages</li>
				<li>the user enters the message text</li>
				<li>The user selects a recipient from the project members</li>
				<li>The user indicates to send the message</li>
			</ol>
			
			<h5>Exceptions</h5>
			If no recipient is entered a warning is prompted.
			If no text is entered a warning is prompted.
			
			<h5>Alternative paths</h5>
			The user may cancel the operation, no message will be sent, the application returns to its previous state.
			
			<h5>Postconditions</h5>
			A message is sent to the recipient.
			
			<h5>Frequency of use</h5>
			3
			<h5>Priority</h5>
			3
			<h5>Open issues</h5>
		</subsection>
		
		<subsection name="[UC-05:02] Read a incoming message"><a name="uc_05_02" />
			<h5>Summary</h5>
			[UC-05:01] implies that the message will be displayed to the receiver. 
			
			<h5>Rationale</h5>
			The user wants to read messages other users sent to him/her.
			
			<h5>Preconditions</h5>
			[ST-02-loaded], at least one incoming message
			
			<h5>Course of events</h5>
			<ol>
				<li>The application shows that a new message has arrived.</li>
				<li>The user indicates to read the incoming message.</li>
				<li>The message is displayed</li>
				<li>The user closes the message</li>
			</ol>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 4.: If another message has arrived the use case is started another time.
			
			<h5>Postconditions</h5>
			The message is deleted. The application returns to its previous state.
			
			<h5>Frequency of use</h5>
			3
			<h5>Priority</h5>
			3
			<h5>Open issues</h5>
			
		</subsection>


		<subsection name="[UC-06] Edit application preferences"><a name="uc_06" />
			<h5>Summary</h5>
			Edit the application preferences. These are:
			<ul>
				<li>Whether the log-in is done when the application is started.</li>
				<li>Log-in credentials</li>
			</ul>
			<h5>Rationale</h5>
			Different users have usage scenarios, workflows or taste.
			
			<h5>Preconditions</h5>
			[ST-01-started]
			
			<h5>Course of Events</h5>
			<ul>
				<li>The user indicates to edit the preferences.</li>
				<li>All available preferences are displayed to the user</li>
				<li>The user may change the preferences.</li>
				<li>the user indicates to save the changes</li>
			</ul>
			
			<h5>Exceptions</h5>
			
			<h5>Alternative paths</h5>
			In 4. the user may cancel the operation, no changes will be saved. The application returns to its previous state.
			
			<h5>Postconditions</h5>
			The chosen preferences are saved.
			
			<h5>Frequency of use</h5>
			1
			
			<h5>Priority</h5>
			2

			<h5>Open issues</h5>
			<p>
			Dominik: Useless Use Case without information what the user can change. Please specify. <br />
			Johannes: Please add, if others are known.
			</p>
			
		</subsection>
	</section>
	
    <section name="Changelog">
		<table>
			<tr>
			  <td>No.</td>
			  <td>Date</td>
			  <td>Author</td>
			  <td>Change</td>
			</tr>
	
			<tr>
			  <td>1</td>
			  <td>2008-04-17</td>
			  <td>simon</td>
			  <td>created</td>
			</tr>
			<tr>
			  <td>2</td>
			  <td>2008-04-23</td>
			  <td>dominik</td>
			  <td>updated list of use cases</td>
			</tr>
			<tr>
			  <td>3</td>
			  <td>2008-04-23</td>
			  <td>dominik</td>
			  <td>created tables for use cases, made them clickable</td>
			</tr>
			<tr>
			  <td>4</td>
			  <td>2008-04-23</td>
			  <td>simon</td>
			  <td>added &quot;to top&quot; links</td>
			</tr>
			<tr>
			  <td>5</td>
			  <td>2008-04-24</td>
			  <td>dominik</td>
			  <td>created some of the use case information</td>
			</tr>
			<tr>
				<td>6</td>
				<td>2008-04-28</td>
				<td>simon</td>
				<td>added descriptions to some use cases</td>
			</tr>
			<tr>
				<td>7</td>
				<td>2008-04-30</td>
				<td>dominik</td>
				<td>Added additional rows to each table, reordered some use cases. </td>
			</tr>
			<tr>
				<td>8</td>
				<td>2008-04-30</td>
				<td>johannes</td>
				<td>Cleared formatting and made editing easier. 
					General reworking of content. </td>
			</tr>
			<tr>
				<td>9</td>
				<td>2008-05-01</td>
				<td>dominik</td>
				<td>completed some use cases</td>
			</tr>
			<tr>
				<td>10</td>
				<td>2008-05-03</td>
				<td>philipp</td>
				<td>completed some use cases</td>
			</tr>
			<tr>
				<td>11</td>
				<td>2008-05-06</td>
				<td>simon</td>
				<td>Reworked the use cases and regrouped them. Should be close to final, although some uncertainties exist regarding the synchronisation.</td>
			</tr>
			<tr>
				<td>12</td>
				<td>2008-05-07</td>
				<td>dominik</td>
				<td>Fixed typos, changed/altered some definitions, added open issues where necessary. 
				</td>
			</tr>
			<tr>
				<td>13</td>
				<td>2008-05-08</td>
				<td>simon</td>
				<td>added the soft lock uc(added a few alternative paths regarding the soft lock), edited [UC-03:03] so that it only supports setting the behaviour on a per project basis</td>
			</tr>
			<tr>
				<td>14</td>
				<td>2008-05-08</td>
				<td>johannes</td>
				<td>Reviewed and rewrote everything but [UC-04]</td>
			</tr>
		  </table>
      </section>
  </body>
</document>
