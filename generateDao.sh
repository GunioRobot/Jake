#!/bin/bash

INFILE=$1
THREADBROKER=$2


OUTFILE=$(echo $INFILE|sed 's/Hibernate/Threaded/g')

DAOTYPE=$(echo $INFILE|sed 's/.*Hibernate\([^\.]*\).java/\1/g')

INTERFACETYPE="I$DAOTYPE"
CLASSTYPE="Threaded$DAOTYPE"
HELPER=.parsehelper.py

cat  > $HELPER << EOF
import sys
while(True):
	line = sys.stdin.readline()
	if line == "":
		break
	if "public " in line and "(" in line and not "{" in line: 
		print line.rstrip(), 
		line = sys.stdin.readline()
		print line.rstrip()
	else:
		print line.rstrip()
EOF

# TODO: Exceptions

function catchblock() {
	NEXCEPTION=$1
	CATCH='\n\t\t} catch (RuntimeException e) {\n\t\t\tthrow e;\n\t\t} catch '
	CATCH="$CATCH"'(Exception e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t'
	echo 
}

function createRegex() {
	RETURNTYPE=$1
	NARGS=$2
	NEXCEPTIONS=$3
	
	TRY='\n\t\ttry {\n\t\t\t'
	CATCH='\n\t\t} catch (RuntimeException e) {\n\t\t\tthrow e;\n\t\t} catch '
	case "$NEXCEPTIONS" in 
		"0")
			;;
		"1")
			;;
		"2")
			;;
		"3")
			;;
		*)
			echo "unsupported number of exceptions"
			return
	CATCH="$CATCH"'(Exception e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t'
	CATCH="$CATCH"'(Exception e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t'

	CATCH="$CATCH"'(Exception e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t'
	START1="$TRY"'return '"$THREADBROKER"'.doTask(new InjectableTask<'
	START2='>() {\n\n\t\t\t\t'
	START="$START1"'\1'"$START2"
	VOIDSTART1="$TRY"''"$THREADBROKER"'.doTask(new InjectableTask<'
	VOIDSTART="$VOIDSTART1"'Void'"$START2"
	END='\n\t\t\t\t}\n\t\t\t});'"$CATCH"

	case "$RETURNTYPE" in 
		"void")
			VOID="$VOIDSTART"'@Override\n\t\t\t\tpublic Void calculate() throws Exception {\n\t\t\t\t\t'
			Q="$VOID"''"$CLASSTYPE"'.this.dao.\2'
			S="\n\t\t\t\t\treturn null;"
			;;
		"boolean")
			BOOL="$START1"'Boolean'"$START2"'@Override\n\t\t\t\tpublic Boolean calculate() throws Exception {\n\t\t\t\t\t'
			Q="$BOOL"'return '"$CLASSTYPE"'.this.dao.\2'
			S=""
			;;
		*)
			TYPE="$START"'@Override\n\t\t\t\tpublic \1 calculate() throws Exception {\n\t\t\t\t\t'
			Q="$TYPE"'return '"$CLASSTYPE"'.this.dao.\2'
			S=""
			;;
	esac
	case "$NARGS" in 
		"0") 
			Q="$Q"'();'"$S$END"
			R='\1 \2()\3';;
		"1") 
			Q="$Q"'(\4);'"$S$END"
			R='\1 \2(final \3 \4)\5';;
		"2") 
			Q="$Q"'(\4, \6);'"$S$END"
			R='\1 \2(final \3 \4, final \5 \6)\7';;
		"3") 
			Q="$Q"'(\4, \6, \8);'"$S$END"
			R='\1 \2(final \3 \4, final \5 \6, final \7 \8)\9';;
		"4") 
			Q="$Q"'(\4, \6, \8, \10);'"$S$END"
			R='\1 \2(final \3 \4, final \5 \6, final \7 \8, final \9 \10)\11';;
		*)
			echo "unsupported number of arguments"
			return
	esac
	echo "$R{\n\t\t$Q\n\t}"
}

{
cat $INFILE |grep -E '^(package|import)'|
	grep -v 'spring' |
	grep -v 'apache'

echo
echo -e "public class $CLASSTYPE implements $INTERFACETYPE {"
echo
echo -e "\tprivate $INTERFACETYPE dao;"
echo
echo -e "\tpublic $CLASSTYPE($INTERFACETYPE dao) {"
echo -e "\t\tthis.dao = dao;"
echo -e "\t}"
echo
echo -e '\t// This file was automatically generated by '$0'. Do not modify. '
echo

cat $INFILE |
sed 's/^[^\t]/XXXXX/g' |grep -v XXXXX | # only stuff in class
	grep -v 'Logger'|
	sed 's/\t}//g'|sed 's/{$/{}/g'|grep -vE '^\w*$' | # only our functions
	sed 's/(final */(/g' |
	sed 's/ final / /g' |
	#	sed 's,/\*\*[\n^/]*\*/,,g' |
	grep -v 'private ' |
	grep -v '/\*' |
	grep -v ' \* ' |
	grep -v '\*/' |
	grep -v '@SuppressWarnings(' |
	grep -v 'else' |
	grep -v 'catch' |
	python $HELPER |
	grep -v '^		' | # remove functions content
	grep -vE '^\w*$' | # remove functions content
	sed 's,@Override,/**\n\t * {@inheritDoc}\n\t */\t\n\t@Override,g' |
	cat |
	#
	# sed 's/\(public .*[^{]\) *\n$/\1/' |
	
	# so far, so good...
	# now replace calls with implementation
	# 	public final void deleteConfigurationValue(final String name) {
	# should contain
	# 
	#	try {
	#		...
	#	} catch (RuntimeException e) {
	#		throw e;
	#	} catch (Exception e) {
	#		throw new IllegalStateException(e);
	#	}
	#	
	#	if void : 
	#		SpringThreadBroker.getInstance().doTask(new InjectableTask<Void>() {
	#
	#			@Override
	#			public Void calculate() throws Exception {
	#				ThreadedConfigurationDao.this.dao.deleteConfigurationValue(name);
	#				return null;
	#			}
	#		});
	# 
	#   if not void :
	#		return SpringThreadBroker.getInstance().doTask(
	#				new InjectableTask<List<Configuration>>() {
	#
	#					@Override
	#					public List<Configuration> calculate() throws Exception {
	#						return ThreadedConfigurationDao.this.dao.getAll();
	#					}
	#				});
	# 
	sed 's/\(void\) *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex void 1)"'/g' |
	sed 's/\(void\) *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex void 2)"'/g' |
	sed 's/\(void\) *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex void 3)"'/g' |
	
	sed 's/\(boolean\) *\([^ ]\{1,\}\) *()\([^{]*\){}/'"$(createRegex boolean 0)"'/g' |
	sed 's/\(boolean\) *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex boolean 1)"'/g' |
	sed 's/\(boolean\) *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex boolean 2)"'/g' |
	sed 's/\(boolean\) *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex boolean 3)"'/g' |

	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *()\([^{]*\){}/'"$(createRegex type 0)"'/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 1)"'/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 2)"'/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\'"$(createRegex type 3)"'/g' |

	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *()\([^{]*\){}/'"$(createRegex type 0)"'/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 1)"'/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 2)"'/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 3)"'/g' |

	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *()\([^{]*\){}/'"$(createRegex type 0)"'/g' |
	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 1)"'/g' |
	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 2)"'/g' |
	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/'"$(createRegex type 3)"'/g' |
	
	#sed 's/void *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\)) *{}/void \1(\2) {\n\t\t'"$VOID2"'\n\t}/g' |
	#sed 's/void *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\)) *{}/void \1(\2) {\n\t\t'"$VOID3"'\n\t}/g' |
	#sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *() * {}/\1 \2() {\n\t\t'"$NONE"'\n\t}/g' |
	#sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\)) *{}/\1 \2(\3) {\n\t\t'"$ONE"'\n\t}/g' |
	
	sed 's/^\t}/\t}\n/g' |
	cat
echo 
echo '}'

} > $OUTFILE
rm $HELPER

