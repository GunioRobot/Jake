#!/bin/bash

INFILE=$1
OUTFILE=$(echo $INFILE|sed 's/Hibernate/Threaded/g')

DAOTYPE=$(echo $INFILE|sed 's/.*Hibernate\([^\.]*\).java/\1/g')

INTERFACETYPE="I$DAOTYPE"
CLASSTYPE="Threaded$DAOTYPE"
HELPER=.parsehelper.py

cat  > $HELPER << EOF
import sys
while(True):
	line = sys.stdin.readline()
	if line == "":
		break
	if "public " in line and "(" in line and not "{" in line: 
		print line.rstrip(), 
		line = sys.stdin.readline()
		print line.rstrip()
	else:
		print line.rstrip()
EOF

{

cat $INFILE |grep -E '^(package|import)'

echo
echo -e "public class $CLASSTYPE implements $INTERFACETYPE {"
echo
echo -e "\tprivate $INTERFACETYPE dao;"
echo
echo -e "\tpublic $CLASSTYPE($INTERFACETYPE dao) {"
echo -e "\t\tthis.dao = dao;"
echo -e "\t}"
echo
echo -e '\t// This file was automatically generated by '$0'. Do not modify. '
echo

ONE='one argument; \1 and \3'
NONE='no argument; \1'
TRY='\n\t\ttry { \n\t\t\t'
CATCH='\n\t\t}catch(RuntimeException e) {\n\t\t\tthrow e;\n\t\t} catch '
CATCH="$CATCH"'(Exception e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t'
START1="$TRY"'return SpringThreadBroker.getInstance().doTask(new InjectableTask<'
START2='>() {\n\n\t\t\t\t'
START="$START1"'\1'"$START2"
VOIDSTART1="$TRY"'SpringThreadBroker.getInstance().doTask(new InjectableTask<'
VOIDSTART="$VOIDSTART1"'\1'"$START2"
END='\n\t\t\t\t}\n\t\t\t});'"$CATCH"


VOID1="$VOIDSTART1"'Void'"$START2"'@Override\n\t\t\t\tpublic Void calculate() throws Exception {\n\t\t\t\t\t'
VOID1="$VOID1"''"$CLASSTYPE"'.this.dao.\1(\3);\n\t\t\t\t\treturn null;'"$END"

VOID2="$VOIDSTART1"'Void'"$START2"'@Override\n\t\t\t\tpublic Void calculate() throws Exception {\n\t\t\t\t\t'
VOID2="$VOID2"''"$CLASSTYPE"'.this.dao.\1(\3, \5);\n\t\t\t\t\treturn null;'"$END"

VOID3="$VOIDSTART1"'Void'"$START2"'@Override\n\t\t\t\tpublic Void calculate() throws Exception {\n\t\t\t\t\t'
VOID3="$VOID3"''"$CLASSTYPE"'.this.dao.\1(\3, \5, \7);\n\t\t\t\t\treturn null;'"$END"

BOOL0="$START1"'Boolean'"$START2"'@Override\n\t\t\t\tpublic Boolean calculate() throws Exception {\n\t\t\t\t\t'
BOOL0="$BOOL0"'return '"$CLASSTYPE"'.this.dao.\1();'"$END"

BOOL1="$START1"'Boolean'"$START2"'@Override\n\t\t\t\tpublic Boolean calculate() throws Exception {\n\t\t\t\t\t'
BOOL1="$BOOL1"'return '"$CLASSTYPE"'.this.dao.\1(\3);'"$END"

BOOL2="$START1"'Boolean'"$START2"'@Override\n\t\t\t\tpublic Boolean calculate() throws Exception {\n\t\t\t\t\t'
BOOL2="$BOOL2"'return '"$CLASSTYPE"'.this.dao.\1(\3, \5);'"$END"

BOOL3="$START"'@Override\n\t\t\t\tpublic Boolean calculate() throws Exception {\n\t\t\t\t\t'
BOOL3="$BOOL2"'return '"$CLASSTYPE"'.this.dao.\1(\3, \5, \7);'"$END"

TYPE0="$START"'@Override\n\t\t\t\tpublic \1 calculate() throws Exception {\n\t\t\t\t\t'
TYPE0="$TYPE0"'return '"$CLASSTYPE"'.this.dao.\2();'"$END"

TYPE1="$START"'@Override\n\t\t\t\tpublic \1 calculate() throws Exception {\n\t\t\t\t\t'
TYPE1="$TYPE1"'return '"$CLASSTYPE"'.this.dao.\2(\4);'"$END"

TYPE2="$START"'@Override\n\t\t\t\tpublic \1 calculate() throws Exception {\n\t\t\t\t\t'
TYPE2="$TYPE2"'return '"$CLASSTYPE"'.this.dao.\2(\4, \6);'"$END"

TYPE3="$START"'@Override\n\t\t\t\tpublic \1 calculate() throws Exception {\n\t\t\t\t\t'
TYPE3="$TYPE2"'return '"$CLASSTYPE"'.this.dao.\2(\4, \6, \8);'"$END"

cat $INFILE |
sed 's/^[^\t]/XXXXX/g' |grep -v XXXXX | # only stuff in class
	grep -v 'Logger'|
	sed 's/\t}//g'|sed 's/{$/{}/g'|grep -vE '^\w*$' | # only our functions
	sed 's/(final */(/g' |
	sed 's/ final / /g' |
	#	sed 's,/\*\*[\n^/]*\*/,,g' |
	grep -v 'private ' |
	grep -v '/\*' |
	grep -v ' \* ' |
	grep -v '\*/' |
	grep -v '@SuppressWarnings(' |
	grep -v 'else' |
	grep -v 'catch' |
	python $HELPER |
	grep -v '^		' | # remove functions content
	grep -vE '^\w*$' | # remove functions content
	sed 's,@Override,/**\n\t * {@inheritDoc}\n\t */\t\n\t@Override,g' |
	cat |
	#
	# sed 's/\(public .*[^{]\) *\n$/\1/' |
	
	# so far, so good...
	# now replace calls with implementation
	# 	public final void deleteConfigurationValue(final String name) {
	# should contain
	# 
	#	try {
	#		...
	#	} catch (RuntimeException e) {
	#		throw e;
	#	} catch (Exception e) {
	#		throw new IllegalStateException(e);
	#	}
	#	
	#	if void : 
	#		SpringThreadBroker.getInstance().doTask(new InjectableTask<Void>() {
	#
	#			@Override
	#			public Void calculate() throws Exception {
	#				ThreadedConfigurationDao.this.dao.deleteConfigurationValue(name);
	#				return null;
	#			}
	#		});
	# 
	#   if not void :
	#		return SpringThreadBroker.getInstance().doTask(
	#				new InjectableTask<List<Configuration>>() {
	#
	#					@Override
	#					public List<Configuration> calculate() throws Exception {
	#						return ThreadedConfigurationDao.this.dao.getAll();
	#					}
	#				});
	# 
	sed 's/void *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/void \1(final \2 \3)\4{\n\t\t'"$VOID1"'\n\t}/g' |
	sed 's/void *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/void \1(final \2 \3, final \4 \5)\6{\n\t\t'"$VOID2"'\n\t}/g' |
	sed 's/void *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/void \1(final \2 \3, final \4 \5, final \6 \7)\8{\n\t\t'"$VOID3"'\n\t}/g' |
	
	sed 's/boolean *\([^ ]\{1,\}\) *()\([^{]*\){}/boolean \1()\2{\n\t\t'"$BOOL0"'\n\t}/g' |
	sed 's/boolean *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/boolean \1(final \2 \3)\4{\n\t\t'"$BOOL1"'\n\t}/g' |
	sed 's/boolean *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/boolean \1(final \2 \3, final \4 \5)\6{\n\t\t'"$BOOL2"'\n\t}/g' |
	sed 's/boolean *\([^ ]\{1,\}\) *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/boolean \1(final \2 \3, final \4 \5, final \6 \7)\8{\n\t\t'"$BOOL3"'\n\t}/g' |

	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *()\([^{]*\){}/\1 \2()\3{\n\t\t'"$TYPE0"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4)\5{\n\t\t'"$TYPE1"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4, final \5 \6)\7{\n\t\t'"$TYPE2"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}<[^>]\{1,\}>>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4, final \5 \6, final \7 \8) \9{\n\t\t'"$TYPE3"'\n\t}/g' |

	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *()\([^{]*\){}/\1 \2()\3{\n\t\t'"$TYPE0"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4)\5{\n\t\t'"$TYPE1"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4, final \5 \6)\7{\n\t\t'"$TYPE2"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}<[^>]\{1,\}>\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4, final \5 \6, final \7 \8) \9{\n\t\t'"$TYPE3"'\n\t}/g' |

	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *()\([^{]*\){}/\1 \2()\3{\n\t\t'"$TYPE0"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4)\5{\n\t\t'"$TYPE1"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4, final \5 \6)\7{\n\t\t'"$TYPE2"'\n\t}/g' |
	sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\), \([^,()]\{1,\}\) \([^,()]\{1,\}\))\([^{]*\){}/\1 \2(final \3 \4, final \5 \6, final \7 \8) \9{\n\t\t'"$TYPE3"'\n\t}/g' |
	
	#sed 's/void *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\)) *{}/void \1(\2) {\n\t\t'"$VOID2"'\n\t}/g' |
	#sed 's/void *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\)) *{}/void \1(\2) {\n\t\t'"$VOID3"'\n\t}/g' |
	#sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *() * {}/\1 \2() {\n\t\t'"$NONE"'\n\t}/g' |
	#sed 's/\([^ ]\{1,\}\) *\([^ ]\{1,\}\)* *(\([^,()]\{1,\}\)) *{}/\1 \2(\3) {\n\t\t'"$ONE"'\n\t}/g' |
	
	sed 's/^\t}/\t}\n/g' |
	cat
echo 
echo '}'

} > $OUTFILE
rm $HELPER

